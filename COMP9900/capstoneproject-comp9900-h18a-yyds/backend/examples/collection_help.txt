Help on Collection in module pymongo.collection object:

class Collection(pymongo.common.BaseObject)
 |  Collection(database, name, create=False, codec_options=None, read_preference=None, write_concern=None, read_concern=None, session=None, **kwargs)
 |  
 |  A Mongo collection.
 |  
 |  Method resolution order:
 |      Collection
 |      pymongo.common.BaseObject
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwargs)
 |      This is only here so that some API misusages are easier to debug.
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __getattr__(self, name)
 |      Get a sub-collection of this collection by name.
 |      
 |      Raises InvalidName if an invalid collection name is used.
 |      
 |      :Parameters:
 |        - `name`: the name of the collection to get
 |  
 |  __getitem__(self, name)
 |  
 |  __init__(self, database, name, create=False, codec_options=None, read_preference=None, write_concern=None, read_concern=None, session=None, **kwargs)
 |      Get / create a Mongo collection.
 |      
 |      Raises :class:`TypeError` if `name` is not an instance of
 |      :class:`basestring` (:class:`str` in python 3). Raises
 |      :class:`~pymongo.errors.InvalidName` if `name` is not a valid
 |      collection name. Any additional keyword arguments will be used
 |      as options passed to the create command. See
 |      :meth:`~pymongo.database.Database.create_collection` for valid
 |      options.
 |      
 |      If `create` is ``True``, `collation` is specified, or any additional
 |      keyword arguments are present, a ``create`` command will be
 |      sent, using ``session`` if specified. Otherwise, a ``create`` command
 |      will not be sent and the collection will be created implicitly on first
 |      use. The optional ``session`` argument is *only* used for the ``create``
 |      command, it is not associated with the collection afterward.
 |      
 |      :Parameters:
 |        - `database`: the database to get a collection from
 |        - `name`: the name of the collection to get
 |        - `create` (optional): if ``True``, force collection
 |          creation even without options being set
 |        - `codec_options` (optional): An instance of
 |          :class:`~bson.codec_options.CodecOptions`. If ``None`` (the
 |          default) database.codec_options is used.
 |        - `read_preference` (optional): The read preference to use. If
 |          ``None`` (the default) database.read_preference is used.
 |        - `write_concern` (optional): An instance of
 |          :class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the
 |          default) database.write_concern is used.
 |        - `read_concern` (optional): An instance of
 |          :class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the
 |          default) database.read_concern is used.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. If a collation is provided,
 |          it will be passed to the create collection command. This option is
 |          only supported on MongoDB 3.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession` that is used with
 |          the create collection command
 |        - `**kwargs` (optional): additional keyword arguments will
 |          be passed as options for the create collection command
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Support the `collation` option.
 |      
 |      .. versionchanged:: 3.2
 |         Added the read_concern option.
 |      
 |      .. versionchanged:: 3.0
 |         Added the codec_options, read_preference, and write_concern options.
 |         Removed the uuid_subtype attribute.
 |         :class:`~pymongo.collection.Collection` no longer returns an
 |         instance of :class:`~pymongo.collection.Collection` for attribute
 |         names with leading underscores. You must use dict-style lookups
 |         instead::
 |      
 |             collection['__my_collection__']
 |      
 |         Not:
 |      
 |             collection.__my_collection__
 |      
 |      .. versionchanged:: 2.2
 |         Removed deprecated argument: options
 |      
 |      .. versionadded:: 2.1
 |         uuid_subtype attribute
 |      
 |      .. mongodoc:: collections
 |  
 |  __iter__(self)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __next__(self)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  aggregate(self, pipeline, session=None, **kwargs)
 |      Perform an aggregation using the aggregation framework on this
 |      collection.
 |      
 |      All optional `aggregate command`_ parameters should be passed as
 |      keyword arguments to this method. Valid options include, but are not
 |      limited to:
 |      
 |        - `allowDiskUse` (bool): Enables writing to temporary files. When set
 |          to True, aggregation stages can write data to the _tmp subdirectory
 |          of the --dbpath directory. The default is False.
 |        - `maxTimeMS` (int): The maximum amount of time to allow the operation
 |          to run in milliseconds.
 |        - `batchSize` (int): The maximum number of documents to return per
 |          batch. Ignored if the connected mongod or mongos does not support
 |          returning aggregate results using a cursor, or `useCursor` is
 |          ``False``.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `useCursor` (bool): Deprecated. Will be removed in PyMongo 4.0.
 |      
 |      The :meth:`aggregate` method obeys the :attr:`read_preference` of this
 |      :class:`Collection`, except when ``$out`` or ``$merge`` are used, in
 |      which case  :attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`
 |      is used.
 |      
 |      .. note:: This method does not support the 'explain' option. Please
 |         use :meth:`~pymongo.database.Database.command` instead. An
 |         example is included in the :ref:`aggregate-examples` documentation.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      :Parameters:
 |        - `pipeline`: a list of aggregation pipeline stages
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): See list of options above.
 |      
 |      :Returns:
 |        A :class:`~pymongo.command_cursor.CommandCursor` over the result
 |        set.
 |      
 |      .. versionchanged:: 3.9
 |         Apply this collection's read concern to pipelines containing the
 |         `$out` stage when connected to MongoDB >= 4.2.
 |         Added support for the ``$merge`` pipeline stage.
 |         Aggregations that write always use read preference
 |         :attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`.
 |      .. versionchanged:: 3.6
 |         Added the `session` parameter. Added the `maxAwaitTimeMS` option.
 |         Deprecated the `useCursor` option.
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4. Support the `collation` option.
 |      .. versionchanged:: 3.0
 |         The :meth:`aggregate` method always returns a CommandCursor. The
 |         pipeline argument must be a list.
 |      .. versionchanged:: 2.7
 |         When the cursor option is used, return
 |         :class:`~pymongo.command_cursor.CommandCursor` instead of
 |         :class:`~pymongo.cursor.Cursor`.
 |      .. versionchanged:: 2.6
 |         Added cursor support.
 |      .. versionadded:: 2.3
 |      
 |      .. seealso:: :doc:`/examples/aggregation`
 |      
 |      .. _aggregate command:
 |          https://docs.mongodb.com/manual/reference/command/aggregate
 |  
 |  aggregate_raw_batches(self, pipeline, **kwargs)
 |      Perform an aggregation and retrieve batches of raw BSON.
 |      
 |      Similar to the :meth:`aggregate` method but returns a
 |      :class:`~pymongo.cursor.RawBatchCursor`.
 |      
 |      This example demonstrates how to work with raw batches, but in practice
 |      raw batches should be passed to an external library that can decode
 |      BSON into another data type, rather than used with PyMongo's
 |      :mod:`bson` module.
 |      
 |        >>> import bson
 |        >>> cursor = db.test.aggregate_raw_batches([
 |        ...     {'$project': {'x': {'$multiply': [2, '$x']}}}])
 |        >>> for batch in cursor:
 |        ...     print(bson.decode_all(batch))
 |      
 |      .. note:: aggregate_raw_batches does not support sessions or auto
 |         encryption.
 |      
 |      .. versionadded:: 3.6
 |  
 |  bulk_write(self, requests, ordered=True, bypass_document_validation=False, session=None)
 |      Send a batch of write operations to the server.
 |      
 |      Requests are passed as a list of write operation instances (
 |      :class:`~pymongo.operations.InsertOne`,
 |      :class:`~pymongo.operations.UpdateOne`,
 |      :class:`~pymongo.operations.UpdateMany`,
 |      :class:`~pymongo.operations.ReplaceOne`,
 |      :class:`~pymongo.operations.DeleteOne`, or
 |      :class:`~pymongo.operations.DeleteMany`).
 |      
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634ef')}
 |        {u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}
 |        >>> # DeleteMany, UpdateOne, and UpdateMany are also available.
 |        ...
 |        >>> from pymongo import InsertOne, DeleteOne, ReplaceOne
 |        >>> requests = [InsertOne({'y': 1}), DeleteOne({'x': 1}),
 |        ...             ReplaceOne({'w': 1}, {'z': 1}, upsert=True)]
 |        >>> result = db.test.bulk_write(requests)
 |        >>> result.inserted_count
 |        1
 |        >>> result.deleted_count
 |        1
 |        >>> result.modified_count
 |        0
 |        >>> result.upserted_ids
 |        {2: ObjectId('54f62ee28891e756a6e1abd5')}
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}
 |        {u'y': 1, u'_id': ObjectId('54f62ee2fba5226811f634f1')}
 |        {u'z': 1, u'_id': ObjectId('54f62ee28891e756a6e1abd5')}
 |      
 |      :Parameters:
 |        - `requests`: A list of write operations (see examples above).
 |        - `ordered` (optional): If ``True`` (the default) requests will be
 |          performed on the server serially, in the order provided. If an error
 |          occurs all remaining operations are aborted. If ``False`` requests
 |          will be performed on the server in arbitrary order, possibly in
 |          parallel, and all operations will be attempted.
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        An instance of :class:`~pymongo.results.BulkWriteResult`.
 |      
 |      .. seealso:: :ref:`writes-and-ids`
 |      
 |      .. note:: `bypass_document_validation` requires server version
 |        **>= 3.2**
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.2
 |        Added bypass_document_validation support
 |      
 |      .. versionadded:: 3.0
 |  
 |  count(self, filter=None, session=None, **kwargs)
 |      **DEPRECATED** - Get the number of documents in this collection.
 |      
 |      The :meth:`count` method is deprecated and **not** supported in a
 |      transaction. Please use :meth:`count_documents` or
 |      :meth:`estimated_document_count` instead.
 |      
 |      All optional count parameters should be passed as keyword arguments
 |      to this method. Valid options include:
 |      
 |        - `skip` (int): The number of matching documents to skip before
 |          returning results.
 |        - `limit` (int): The maximum number of documents to count. A limit
 |          of 0 (the default) is equivalent to setting no limit.
 |        - `maxTimeMS` (int): The maximum amount of time to allow the count
 |          command to run, in milliseconds.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `hint` (string or list of tuples): The index to use. Specify either
 |          the index name as a string or the index specification as a list of
 |          tuples (e.g. [('a', pymongo.ASCENDING), ('b', pymongo.ASCENDING)]).
 |      
 |      The :meth:`count` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      .. note:: When migrating from :meth:`count` to :meth:`count_documents`
 |         the following query operators must be replaced:
 |      
 |         +-------------+-------------------------------------+
 |         | Operator    | Replacement                         |
 |         +=============+=====================================+
 |         | $where      | `$expr`_                            |
 |         +-------------+-------------------------------------+
 |         | $near       | `$geoWithin`_ with `$center`_       |
 |         +-------------+-------------------------------------+
 |         | $nearSphere | `$geoWithin`_ with `$centerSphere`_ |
 |         +-------------+-------------------------------------+
 |      
 |         $expr requires MongoDB 3.6+
 |      
 |      :Parameters:
 |        - `filter` (optional): A query document that selects which documents
 |          to count in the collection.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): See list of options above.
 |      
 |      .. versionchanged:: 3.7
 |         Deprecated.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Support the `collation` option.
 |      
 |      .. _$expr: https://docs.mongodb.com/manual/reference/operator/query/expr/
 |      .. _$geoWithin: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/
 |      .. _$center: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center
 |      .. _$centerSphere: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere
 |  
 |  count_documents(self, filter, session=None, **kwargs)
 |      Count the number of documents in this collection.
 |      
 |      .. note:: For a fast count of the total documents in a collection see
 |         :meth:`estimated_document_count`.
 |      
 |      The :meth:`count_documents` method is supported in a transaction.
 |      
 |      All optional parameters should be passed as keyword arguments
 |      to this method. Valid options include:
 |      
 |        - `skip` (int): The number of matching documents to skip before
 |          returning results.
 |        - `limit` (int): The maximum number of documents to count. Must be
 |          a positive integer. If not provided, no limit is imposed.
 |        - `maxTimeMS` (int): The maximum amount of time to allow this
 |          operation to run, in milliseconds.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `hint` (string or list of tuples): The index to use. Specify either
 |          the index name as a string or the index specification as a list of
 |          tuples (e.g. [('a', pymongo.ASCENDING), ('b', pymongo.ASCENDING)]).
 |          This option is only supported on MongoDB 3.6 and above.
 |      
 |      The :meth:`count_documents` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      .. note:: When migrating from :meth:`count` to :meth:`count_documents`
 |         the following query operators must be replaced:
 |      
 |         +-------------+-------------------------------------+
 |         | Operator    | Replacement                         |
 |         +=============+=====================================+
 |         | $where      | `$expr`_                            |
 |         +-------------+-------------------------------------+
 |         | $near       | `$geoWithin`_ with `$center`_       |
 |         +-------------+-------------------------------------+
 |         | $nearSphere | `$geoWithin`_ with `$centerSphere`_ |
 |         +-------------+-------------------------------------+
 |      
 |         $expr requires MongoDB 3.6+
 |      
 |      :Parameters:
 |        - `filter` (required): A query document that selects which documents
 |          to count in the collection. Can be an empty document to count all
 |          documents.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): See list of options above.
 |      
 |      .. versionadded:: 3.7
 |      
 |      .. _$expr: https://docs.mongodb.com/manual/reference/operator/query/expr/
 |      .. _$geoWithin: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/
 |      .. _$center: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center
 |      .. _$centerSphere: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere
 |  
 |  create_index(self, keys, session=None, **kwargs)
 |      Creates an index on this collection.
 |      
 |      Takes either a single key or a list of (key, direction) pairs.
 |      The key(s) must be an instance of :class:`basestring`
 |      (:class:`str` in python 3), and the direction(s) must be one of
 |      (:data:`~pymongo.ASCENDING`, :data:`~pymongo.DESCENDING`,
 |      :data:`~pymongo.GEO2D`, :data:`~pymongo.GEOHAYSTACK`,
 |      :data:`~pymongo.GEOSPHERE`, :data:`~pymongo.HASHED`,
 |      :data:`~pymongo.TEXT`).
 |      
 |      To create a single key ascending index on the key ``'mike'`` we just
 |      use a string argument::
 |      
 |        >>> my_collection.create_index("mike")
 |      
 |      For a compound index on ``'mike'`` descending and ``'eliot'``
 |      ascending we need to use a list of tuples::
 |      
 |        >>> my_collection.create_index([("mike", pymongo.DESCENDING),
 |        ...                             ("eliot", pymongo.ASCENDING)])
 |      
 |      All optional index creation parameters should be passed as
 |      keyword arguments to this method. For example::
 |      
 |        >>> my_collection.create_index([("mike", pymongo.DESCENDING)],
 |        ...                            background=True)
 |      
 |      Valid options include, but are not limited to:
 |      
 |        - `name`: custom name to use for this index - if none is
 |          given, a name will be generated.
 |        - `unique`: if ``True``, creates a uniqueness constraint on the
 |          index.
 |        - `background`: if ``True``, this index should be created in the
 |          background.
 |        - `sparse`: if ``True``, omit from the index any documents that lack
 |          the indexed field.
 |        - `bucketSize`: for use with geoHaystack indexes.
 |          Number of documents to group together within a certain proximity
 |          to a given longitude and latitude.
 |        - `min`: minimum value for keys in a :data:`~pymongo.GEO2D`
 |          index.
 |        - `max`: maximum value for keys in a :data:`~pymongo.GEO2D`
 |          index.
 |        - `expireAfterSeconds`: <int> Used to create an expiring (TTL)
 |          collection. MongoDB will automatically delete documents from
 |          this collection after <int> seconds. The indexed field must
 |          be a UTC datetime or the data will not expire.
 |        - `partialFilterExpression`: A document that specifies a filter for
 |          a partial index. Requires MongoDB >=3.2.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. Requires MongoDB >= 3.4.
 |        - `wildcardProjection`: Allows users to include or exclude specific
 |          field paths from a `wildcard index`_ using the {"$**" : 1} key
 |          pattern. Requires MongoDB >= 4.2.
 |        - `hidden`: if ``True``, this index will be hidden from the query
 |          planner and will not be evaluated as part of query plan
 |          selection. Requires MongoDB >= 4.4.
 |      
 |      See the MongoDB documentation for a full list of supported options by
 |      server version.
 |      
 |      .. warning:: `dropDups` is not supported by MongoDB 3.0 or newer. The
 |        option is silently ignored by the server and unique index builds
 |        using the option will fail if a duplicate value is detected.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      :Parameters:
 |        - `keys`: a single key or a list of (key, direction)
 |          pairs specifying the index to create
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): any additional index creation
 |          options (see the above list) should be passed as keyword
 |          arguments
 |      
 |      .. versionchanged:: 3.11
 |         Added the ``hidden`` option.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter. Added support for passing maxTimeMS
 |         in kwargs.
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4. Support the `collation` option.
 |      .. versionchanged:: 3.2
 |         Added partialFilterExpression to support partial indexes.
 |      .. versionchanged:: 3.0
 |         Renamed `key_or_list` to `keys`. Removed the `cache_for` option.
 |         :meth:`create_index` no longer caches index names. Removed support
 |         for the drop_dups and bucket_size aliases.
 |      
 |      .. mongodoc:: indexes
 |      
 |      .. _wildcard index: https://docs.mongodb.com/master/core/index-wildcard/#wildcard-index-core
 |  
 |  create_indexes(self, indexes, session=None, **kwargs)
 |      Create one or more indexes on this collection.
 |      
 |        >>> from pymongo import IndexModel, ASCENDING, DESCENDING
 |        >>> index1 = IndexModel([("hello", DESCENDING),
 |        ...                      ("world", ASCENDING)], name="hello_world")
 |        >>> index2 = IndexModel([("goodbye", DESCENDING)])
 |        >>> db.test.create_indexes([index1, index2])
 |        ["hello_world", "goodbye_-1"]
 |      
 |      :Parameters:
 |        - `indexes`: A list of :class:`~pymongo.operations.IndexModel`
 |          instances.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): optional arguments to the createIndexes
 |          command (like maxTimeMS) can be passed as keyword arguments.
 |      
 |      .. note:: `create_indexes` uses the `createIndexes`_ command
 |         introduced in MongoDB **2.6** and cannot be used with earlier
 |         versions.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter. Added support for arbitrary keyword
 |         arguments.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |      .. versionadded:: 3.0
 |      
 |      .. _createIndexes: https://docs.mongodb.com/manual/reference/command/createIndexes/
 |  
 |  delete_many(self, filter, collation=None, hint=None, session=None)
 |      Delete one or more documents matching the filter.
 |      
 |        >>> db.test.count_documents({'x': 1})
 |        3
 |        >>> result = db.test.delete_many({'x': 1})
 |        >>> result.deleted_count
 |        3
 |        >>> db.test.count_documents({'x': 1})
 |        0
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the documents to delete.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.DeleteResult`.
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.4
 |        Added the `collation` option.
 |      .. versionadded:: 3.0
 |  
 |  delete_one(self, filter, collation=None, hint=None, session=None)
 |      Delete a single document matching the filter.
 |      
 |        >>> db.test.count_documents({'x': 1})
 |        3
 |        >>> result = db.test.delete_one({'x': 1})
 |        >>> result.deleted_count
 |        1
 |        >>> db.test.count_documents({'x': 1})
 |        2
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to delete.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.DeleteResult`.
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.4
 |        Added the `collation` option.
 |      .. versionadded:: 3.0
 |  
 |  distinct(self, key, filter=None, session=None, **kwargs)
 |      Get a list of distinct values for `key` among all documents
 |      in this collection.
 |      
 |      Raises :class:`TypeError` if `key` is not an instance of
 |      :class:`basestring` (:class:`str` in python 3).
 |      
 |      All optional distinct parameters should be passed as keyword arguments
 |      to this method. Valid options include:
 |      
 |        - `maxTimeMS` (int): The maximum amount of time to allow the count
 |          command to run, in milliseconds.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |      
 |      The :meth:`distinct` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      :Parameters:
 |        - `key`: name of the field for which we want to get the distinct
 |          values
 |        - `filter` (optional): A query document that specifies the documents
 |          from which to retrieve the distinct values.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): See list of options above.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Support the `collation` option.
 |  
 |  drop(self, session=None)
 |      Alias for :meth:`~pymongo.database.Database.drop_collection`.
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      The following two calls are equivalent:
 |      
 |        >>> db.foo.drop()
 |        >>> db.drop_collection("foo")
 |      
 |      .. versionchanged:: 3.7
 |         :meth:`drop` now respects this :class:`Collection`'s :attr:`write_concern`.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |  
 |  drop_index(self, index_or_name, session=None, **kwargs)
 |      Drops the specified index on this collection.
 |      
 |      Can be used on non-existant collections or collections with no
 |      indexes.  Raises OperationFailure on an error (e.g. trying to
 |      drop an index that does not exist). `index_or_name`
 |      can be either an index name (as returned by `create_index`),
 |      or an index specifier (as passed to `create_index`). An index
 |      specifier should be a list of (key, direction) pairs. Raises
 |      TypeError if index is not an instance of (str, unicode, list).
 |      
 |      .. warning::
 |      
 |        if a custom name was used on index creation (by
 |        passing the `name` parameter to :meth:`create_index` or
 |        :meth:`ensure_index`) the index **must** be dropped by name.
 |      
 |      :Parameters:
 |        - `index_or_name`: index (or name of index) to drop
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): optional arguments to the createIndexes
 |          command (like maxTimeMS) can be passed as keyword arguments.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter. Added support for arbitrary keyword
 |         arguments.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |  
 |  drop_indexes(self, session=None, **kwargs)
 |      Drops all indexes on this collection.
 |      
 |      Can be used on non-existant collections or collections with no indexes.
 |      Raises OperationFailure on an error.
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): optional arguments to the createIndexes
 |          command (like maxTimeMS) can be passed as keyword arguments.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter. Added support for arbitrary keyword
 |         arguments.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |  
 |  ensure_index(self, key_or_list, cache_for=300, **kwargs)
 |      **DEPRECATED** - Ensures that an index exists on this collection.
 |      
 |      .. versionchanged:: 3.0
 |          **DEPRECATED**
 |  
 |  estimated_document_count(self, **kwargs)
 |      Get an estimate of the number of documents in this collection using
 |      collection metadata.
 |      
 |      The :meth:`estimated_document_count` method is **not** supported in a
 |      transaction.
 |      
 |      All optional parameters should be passed as keyword arguments
 |      to this method. Valid options include:
 |      
 |        - `maxTimeMS` (int): The maximum amount of time to allow this
 |          operation to run, in milliseconds.
 |      
 |      :Parameters:
 |        - `**kwargs` (optional): See list of options above.
 |      
 |      .. versionadded:: 3.7
 |  
 |  find(self, *args, **kwargs)
 |      Query the database.
 |      
 |      The `filter` argument is a prototype document that all results
 |      must match. For example:
 |      
 |      >>> db.test.find({"hello": "world"})
 |      
 |      only matches documents that have a key "hello" with value
 |      "world".  Matches can have other keys *in addition* to
 |      "hello". The `projection` argument is used to specify a subset
 |      of fields that should be included in the result documents. By
 |      limiting results to a certain subset of fields you can cut
 |      down on network traffic and decoding time.
 |      
 |      Raises :class:`TypeError` if any of the arguments are of
 |      improper type. Returns an instance of
 |      :class:`~pymongo.cursor.Cursor` corresponding to this query.
 |      
 |      The :meth:`find` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      :Parameters:
 |        - `filter` (optional): a SON object specifying elements which
 |          must be present for a document to be included in the
 |          result set
 |        - `projection` (optional): a list of field names that should be
 |          returned in the result set or a dict specifying the fields
 |          to include or exclude. If `projection` is a list "_id" will
 |          always be returned. Use a dict to exclude fields from
 |          the result (e.g. projection={'_id': False}).
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `skip` (optional): the number of documents to omit (from
 |          the start of the result set) when returning the results
 |        - `limit` (optional): the maximum number of results to
 |          return. A limit of 0 (the default) is equivalent to setting no
 |          limit.
 |        - `no_cursor_timeout` (optional): if False (the default), any
 |          returned cursor is closed by the server after 10 minutes of
 |          inactivity. If set to True, the returned cursor will never
 |          time out on the server. Care should be taken to ensure that
 |          cursors with no_cursor_timeout turned on are properly closed.
 |        - `cursor_type` (optional): the type of cursor to return. The valid
 |          options are defined by :class:`~pymongo.cursor.CursorType`:
 |      
 |          - :attr:`~pymongo.cursor.CursorType.NON_TAILABLE` - the result of
 |            this find call will return a standard cursor over the result set.
 |          - :attr:`~pymongo.cursor.CursorType.TAILABLE` - the result of this
 |            find call will be a tailable cursor - tailable cursors are only
 |            for use with capped collections. They are not closed when the
 |            last data is retrieved but are kept open and the cursor location
 |            marks the final document position. If more data is received
 |            iteration of the cursor will continue from the last document
 |            received. For details, see the `tailable cursor documentation
 |            <http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_.
 |          - :attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` - the result
 |            of this find call will be a tailable cursor with the await flag
 |            set. The server will wait for a few seconds after returning the
 |            full result set so that it can capture and return additional data
 |            added during the query.
 |          - :attr:`~pymongo.cursor.CursorType.EXHAUST` - the result of this
 |            find call will be an exhaust cursor. MongoDB will stream batched
 |            results to the client without waiting for the client to request
 |            each batch, reducing latency. See notes on compatibility below.
 |      
 |        - `sort` (optional): a list of (key, direction) pairs
 |          specifying the sort order for this query. See
 |          :meth:`~pymongo.cursor.Cursor.sort` for details.
 |        - `allow_partial_results` (optional): if True, mongos will return
 |          partial results if some shards are down instead of returning an
 |          error.
 |        - `oplog_replay` (optional): **DEPRECATED** - if True, set the
 |          oplogReplay query flag. Default: False.
 |        - `batch_size` (optional): Limits the number of documents returned in
 |          a single batch.
 |        - `manipulate` (optional): **DEPRECATED** - If True, apply any
 |          outgoing SON manipulators before returning. Default: True.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `return_key` (optional): If True, return only the index keys in
 |          each document.
 |        - `show_record_id` (optional): If True, adds a field ``$recordId`` in
 |          each document with the storage engine's internal record identifier.
 |        - `snapshot` (optional): **DEPRECATED** - If True, prevents the
 |          cursor from returning a document more than once because of an
 |          intervening write operation.
 |        - `hint` (optional): An index, in the same format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). Pass this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.hint` on the cursor to tell Mongo the
 |          proper index to use for the query.
 |        - `max_time_ms` (optional): Specifies a time limit for a query
 |          operation. If the specified time is exceeded, the operation will be
 |          aborted and :exc:`~pymongo.errors.ExecutionTimeout` is raised. Pass
 |          this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.max_time_ms` on the cursor.
 |        - `max_scan` (optional): **DEPRECATED** - The maximum number of
 |          documents to scan. Pass this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.max_scan` on the cursor.
 |        - `min` (optional): A list of field, limit pairs specifying the
 |          inclusive lower bound for all keys of a specific index in order.
 |          Pass this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.min` on the cursor. ``hint`` must
 |          also be passed to ensure the query utilizes the correct index.
 |        - `max` (optional): A list of field, limit pairs specifying the
 |          exclusive upper bound for all keys of a specific index in order.
 |          Pass this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.max` on the cursor. ``hint`` must
 |          also be passed to ensure the query utilizes the correct index.
 |        - `comment` (optional): A string to attach to the query to help
 |          interpret and trace the operation in the server logs and in profile
 |          data. Pass this as an alternative to calling
 |          :meth:`~pymongo.cursor.Cursor.comment` on the cursor.
 |        - `modifiers` (optional): **DEPRECATED** - A dict specifying
 |          additional MongoDB query modifiers. Use the keyword arguments listed
 |          above instead.
 |        - `allow_disk_use` (optional): if True, MongoDB may use temporary
 |          disk files to store data exceeding the system memory limit while
 |          processing a blocking sort operation. The option has no effect if
 |          MongoDB can satisfy the specified sort using an index, or if the
 |          blocking sort requires less memory than the 100 MiB limit. This
 |          option is only supported on MongoDB 4.4 and above.
 |      
 |      .. note:: There are a number of caveats to using
 |        :attr:`~pymongo.cursor.CursorType.EXHAUST` as cursor_type:
 |      
 |        - The `limit` option can not be used with an exhaust cursor.
 |      
 |        - Exhaust cursors are not supported by mongos and can not be
 |          used with a sharded cluster.
 |      
 |        - A :class:`~pymongo.cursor.Cursor` instance created with the
 |          :attr:`~pymongo.cursor.CursorType.EXHAUST` cursor_type requires an
 |          exclusive :class:`~socket.socket` connection to MongoDB. If the
 |          :class:`~pymongo.cursor.Cursor` is discarded without being
 |          completely iterated the underlying :class:`~socket.socket`
 |          connection will be closed and discarded without being returned to
 |          the connection pool.
 |      
 |      .. versionchanged:: 3.11
 |         Added the ``allow_disk_use`` option.
 |         Deprecated the ``oplog_replay`` option. Support for this option is
 |         deprecated in MongoDB 4.4. The query engine now automatically
 |         optimizes queries against the oplog without requiring this
 |         option to be set.
 |      
 |      .. versionchanged:: 3.7
 |         Deprecated the ``snapshot`` option, which is deprecated in MongoDB
 |         3.6 and removed in MongoDB 4.0.
 |         Deprecated the ``max_scan`` option. Support for this option is
 |         deprecated in MongoDB 4.0. Use ``max_time_ms`` instead to limit
 |         server-side execution time.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.5
 |         Added the options ``return_key``, ``show_record_id``, ``snapshot``,
 |         ``hint``, ``max_time_ms``, ``max_scan``, ``min``, ``max``, and
 |         ``comment``.
 |         Deprecated the ``modifiers`` option.
 |      
 |      .. versionchanged:: 3.4
 |         Added support for the ``collation`` option.
 |      
 |      .. versionchanged:: 3.0
 |         Changed the parameter names ``spec``, ``fields``, ``timeout``, and
 |         ``partial`` to ``filter``, ``projection``, ``no_cursor_timeout``,
 |         and ``allow_partial_results`` respectively.
 |         Added the ``cursor_type``, ``oplog_replay``, and ``modifiers``
 |         options.
 |         Removed the ``network_timeout``, ``read_preference``, ``tag_sets``,
 |         ``secondary_acceptable_latency_ms``, ``max_scan``, ``snapshot``,
 |         ``tailable``, ``await_data``, ``exhaust``, ``as_class``, and
 |         slave_okay parameters.
 |         Removed ``compile_re`` option: PyMongo now always
 |         represents BSON regular expressions as :class:`~bson.regex.Regex`
 |         objects. Use :meth:`~bson.regex.Regex.try_compile` to attempt to
 |         convert from a BSON regular expression to a Python regular
 |         expression object.
 |         Soft deprecated the ``manipulate`` option.
 |      
 |      .. versionchanged:: 2.7
 |         Added ``compile_re`` option. If set to False, PyMongo represented
 |         BSON regular expressions as :class:`~bson.regex.Regex` objects
 |         instead of attempting to compile BSON regular expressions as Python
 |         native regular expressions, thus preventing errors for some
 |         incompatible patterns, see `PYTHON-500`_.
 |      
 |      .. versionchanged:: 2.3
 |         Added the ``tag_sets`` and ``secondary_acceptable_latency_ms``
 |         parameters.
 |      
 |      .. _PYTHON-500: https://jira.mongodb.org/browse/PYTHON-500
 |      
 |      .. mongodoc:: find
 |  
 |  find_and_modify(self, query={}, update=None, upsert=False, sort=None, full_response=False, manipulate=False, **kwargs)
 |      Update and return an object.
 |      
 |      **DEPRECATED** - Use :meth:`find_one_and_delete`,
 |      :meth:`find_one_and_replace`, or :meth:`find_one_and_update` instead.
 |  
 |  find_one(self, filter=None, *args, **kwargs)
 |      Get a single document from the database.
 |      
 |      All arguments to :meth:`find` are also valid arguments for
 |      :meth:`find_one`, although any `limit` argument will be
 |      ignored. Returns a single document, or ``None`` if no matching
 |      document is found.
 |      
 |      The :meth:`find_one` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      :Parameters:
 |      
 |        - `filter` (optional): a dictionary specifying
 |          the query to be performed OR any other type to be used as
 |          the value for a query for ``"_id"``.
 |      
 |        - `*args` (optional): any additional positional arguments
 |          are the same as the arguments to :meth:`find`.
 |      
 |        - `**kwargs` (optional): any additional keyword arguments
 |          are the same as the arguments to :meth:`find`.
 |      
 |            >>> collection.find_one(max_time_ms=100)
 |  
 |  find_one_and_delete(self, filter, projection=None, sort=None, hint=None, session=None, **kwargs)
 |      Finds a single document and deletes it, returning the document.
 |      
 |        >>> db.test.count_documents({'x': 1})
 |        2
 |        >>> db.test.find_one_and_delete({'x': 1})
 |        {u'x': 1, u'_id': ObjectId('54f4e12bfba5220aa4d6dee8')}
 |        >>> db.test.count_documents({'x': 1})
 |        1
 |      
 |      If multiple documents match *filter*, a *sort* can be applied.
 |      
 |        >>> for doc in db.test.find({'x': 1}):
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |        >>> db.test.find_one_and_delete(
 |        ...     {'x': 1}, sort=[('_id', pymongo.DESCENDING)])
 |        {u'x': 1, u'_id': 2}
 |      
 |      The *projection* option can be used to limit the fields returned.
 |      
 |        >>> db.test.find_one_and_delete({'x': 1}, projection={'_id': False})
 |        {u'x': 1}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to delete.
 |        - `projection` (optional): a list of field names that should be
 |          returned in the result document or a mapping specifying the fields
 |          to include or exclude. If `projection` is a list "_id" will
 |          always be returned. Use a mapping to exclude fields from
 |          the result (e.g. projection={'_id': False}).
 |        - `sort` (optional): a list of (key, direction) pairs
 |          specifying the sort order for the query. If multiple documents
 |          match the query, they are sorted and the first is deleted.
 |        - `hint` (optional): An index to use to support the query predicate
 |          specified either by its string name, or in the same format as
 |          passed to :meth:`~pymongo.collection.Collection.create_index`
 |          (e.g. ``[('field', ASCENDING)]``). This option is only supported
 |          on MongoDB 4.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional command arguments can be passed
 |          as keyword arguments (for example maxTimeMS can be used with
 |          recent server versions).
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.2
 |         Respects write concern.
 |      
 |      .. warning:: Starting in PyMongo 3.2, this command uses the
 |         :class:`~pymongo.write_concern.WriteConcern` of this
 |         :class:`~pymongo.collection.Collection` when connected to MongoDB >=
 |         3.2. Note that using an elevated write concern with this command may
 |         be slower compared to using the default write concern.
 |      
 |      .. versionchanged:: 3.4
 |         Added the `collation` option.
 |      .. versionadded:: 3.0
 |  
 |  find_one_and_replace(self, filter, replacement, projection=None, sort=None, upsert=False, return_document=False, hint=None, session=None, **kwargs)
 |      Finds a single document and replaces it, returning either the
 |      original or the replaced document.
 |      
 |      The :meth:`find_one_and_replace` method differs from
 |      :meth:`find_one_and_update` by replacing the document matched by
 |      *filter*, rather than modifying the existing document.
 |      
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |        >>> db.test.find_one_and_replace({'x': 1}, {'y': 1})
 |        {u'x': 1, u'_id': 0}
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'y': 1, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to replace.
 |        - `replacement`: The replacement document.
 |        - `projection` (optional): A list of field names that should be
 |          returned in the result document or a mapping specifying the fields
 |          to include or exclude. If `projection` is a list "_id" will
 |          always be returned. Use a mapping to exclude fields from
 |          the result (e.g. projection={'_id': False}).
 |        - `sort` (optional): a list of (key, direction) pairs
 |          specifying the sort order for the query. If multiple documents
 |          match the query, they are sorted and the first is replaced.
 |        - `upsert` (optional): When ``True``, inserts a new document if no
 |          document matches the query. Defaults to ``False``.
 |        - `return_document`: If
 |          :attr:`ReturnDocument.BEFORE` (the default),
 |          returns the original document before it was replaced, or ``None``
 |          if no document matches. If
 |          :attr:`ReturnDocument.AFTER`, returns the replaced
 |          or inserted document.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional command arguments can be passed
 |          as keyword arguments (for example maxTimeMS can be used with
 |          recent server versions).
 |      
 |      .. versionchanged:: 3.11
 |         Added the ``hint`` option.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.4
 |         Added the ``collation`` option.
 |      .. versionchanged:: 3.2
 |         Respects write concern.
 |      
 |      .. warning:: Starting in PyMongo 3.2, this command uses the
 |         :class:`~pymongo.write_concern.WriteConcern` of this
 |         :class:`~pymongo.collection.Collection` when connected to MongoDB >=
 |         3.2. Note that using an elevated write concern with this command may
 |         be slower compared to using the default write concern.
 |      
 |      .. versionadded:: 3.0
 |  
 |  find_one_and_update(self, filter, update, projection=None, sort=None, upsert=False, return_document=False, array_filters=None, hint=None, session=None, **kwargs)
 |      Finds a single document and updates it, returning either the
 |      original or the updated document.
 |      
 |        >>> db.test.find_one_and_update(
 |        ...    {'_id': 665}, {'$inc': {'count': 1}, '$set': {'done': True}})
 |        {u'_id': 665, u'done': False, u'count': 25}}
 |      
 |      Returns ``None`` if no document matches the filter.
 |      
 |        >>> db.test.find_one_and_update(
 |        ...    {'_exists': False}, {'$inc': {'count': 1}})
 |      
 |      When the filter matches, by default :meth:`find_one_and_update`
 |      returns the original version of the document before the update was
 |      applied. To return the updated (or inserted in the case of
 |      *upsert*) version of the document instead, use the *return_document*
 |      option.
 |      
 |        >>> from pymongo import ReturnDocument
 |        >>> db.example.find_one_and_update(
 |        ...     {'_id': 'userid'},
 |        ...     {'$inc': {'seq': 1}},
 |        ...     return_document=ReturnDocument.AFTER)
 |        {u'_id': u'userid', u'seq': 1}
 |      
 |      You can limit the fields returned with the *projection* option.
 |      
 |        >>> db.example.find_one_and_update(
 |        ...     {'_id': 'userid'},
 |        ...     {'$inc': {'seq': 1}},
 |        ...     projection={'seq': True, '_id': False},
 |        ...     return_document=ReturnDocument.AFTER)
 |        {u'seq': 2}
 |      
 |      The *upsert* option can be used to create the document if it doesn't
 |      already exist.
 |      
 |        >>> db.example.delete_many({}).deleted_count
 |        1
 |        >>> db.example.find_one_and_update(
 |        ...     {'_id': 'userid'},
 |        ...     {'$inc': {'seq': 1}},
 |        ...     projection={'seq': True, '_id': False},
 |        ...     upsert=True,
 |        ...     return_document=ReturnDocument.AFTER)
 |        {u'seq': 1}
 |      
 |      If multiple documents match *filter*, a *sort* can be applied.
 |      
 |        >>> for doc in db.test.find({'done': True}):
 |        ...     print(doc)
 |        ...
 |        {u'_id': 665, u'done': True, u'result': {u'count': 26}}
 |        {u'_id': 701, u'done': True, u'result': {u'count': 17}}
 |        >>> db.test.find_one_and_update(
 |        ...     {'done': True},
 |        ...     {'$set': {'final': True}},
 |        ...     sort=[('_id', pymongo.DESCENDING)])
 |        {u'_id': 701, u'done': True, u'result': {u'count': 17}}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to update.
 |        - `update`: The update operations to apply.
 |        - `projection` (optional): A list of field names that should be
 |          returned in the result document or a mapping specifying the fields
 |          to include or exclude. If `projection` is a list "_id" will
 |          always be returned. Use a dict to exclude fields from
 |          the result (e.g. projection={'_id': False}).
 |        - `sort` (optional): a list of (key, direction) pairs
 |          specifying the sort order for the query. If multiple documents
 |          match the query, they are sorted and the first is updated.
 |        - `upsert` (optional): When ``True``, inserts a new document if no
 |          document matches the query. Defaults to ``False``.
 |        - `return_document`: If
 |          :attr:`ReturnDocument.BEFORE` (the default),
 |          returns the original document before it was updated. If
 |          :attr:`ReturnDocument.AFTER`, returns the updated
 |          or inserted document.
 |        - `array_filters` (optional): A list of filters specifying which
 |          array elements an update should apply. This option is only
 |          supported on MongoDB 3.6 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.4 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional command arguments can be passed
 |          as keyword arguments (for example maxTimeMS can be used with
 |          recent server versions).
 |      
 |      .. versionchanged:: 3.11
 |         Added the ``hint`` option.
 |      .. versionchanged:: 3.9
 |         Added the ability to accept a pipeline as the ``update``.
 |      .. versionchanged:: 3.6
 |         Added the ``array_filters`` and ``session`` options.
 |      .. versionchanged:: 3.4
 |         Added the ``collation`` option.
 |      .. versionchanged:: 3.2
 |         Respects write concern.
 |      
 |      .. warning:: Starting in PyMongo 3.2, this command uses the
 |         :class:`~pymongo.write_concern.WriteConcern` of this
 |         :class:`~pymongo.collection.Collection` when connected to MongoDB >=
 |         3.2. Note that using an elevated write concern with this command may
 |         be slower compared to using the default write concern.
 |      
 |      .. versionadded:: 3.0
 |  
 |  find_raw_batches(self, *args, **kwargs)
 |      Query the database and retrieve batches of raw BSON.
 |      
 |      Similar to the :meth:`find` method but returns a
 |      :class:`~pymongo.cursor.RawBatchCursor`.
 |      
 |      This example demonstrates how to work with raw batches, but in practice
 |      raw batches should be passed to an external library that can decode
 |      BSON into another data type, rather than used with PyMongo's
 |      :mod:`bson` module.
 |      
 |        >>> import bson
 |        >>> cursor = db.test.find_raw_batches()
 |        >>> for batch in cursor:
 |        ...     print(bson.decode_all(batch))
 |      
 |      .. note:: find_raw_batches does not support sessions or auto
 |         encryption.
 |      
 |      .. versionadded:: 3.6
 |  
 |  group(self, key, condition, initial, reduce, finalize=None, **kwargs)
 |      Perform a query similar to an SQL *group by* operation.
 |      
 |      **DEPRECATED** - The group command was deprecated in MongoDB 3.4. The
 |      :meth:`~group` method is deprecated and will be removed in PyMongo 4.0.
 |      Use :meth:`~aggregate` with the `$group` stage or :meth:`~map_reduce`
 |      instead.
 |      
 |      .. versionchanged:: 3.5
 |         Deprecated the group method.
 |      .. versionchanged:: 3.4
 |         Added the `collation` option.
 |      .. versionchanged:: 2.2
 |         Removed deprecated argument: command
 |  
 |  index_information(self, session=None)
 |      Get information on this collection's indexes.
 |      
 |      Returns a dictionary where the keys are index names (as
 |      returned by create_index()) and the values are dictionaries
 |      containing information about each index. The dictionary is
 |      guaranteed to contain at least a single key, ``"key"`` which
 |      is a list of (key, direction) pairs specifying the index (as
 |      passed to create_index()). It will also contain any other
 |      metadata about the indexes, except for the ``"ns"`` and
 |      ``"name"`` keys, which are cleaned. Example output might look
 |      like this:
 |      
 |      >>> db.test.create_index("x", unique=True)
 |      u'x_1'
 |      >>> db.test.index_information()
 |      {u'_id_': {u'key': [(u'_id', 1)]},
 |       u'x_1': {u'unique': True, u'key': [(u'x', 1)]}}
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |  
 |  initialize_ordered_bulk_op(self, bypass_document_validation=False)
 |      **DEPRECATED** - Initialize an ordered batch of write operations.
 |      
 |      Operations will be performed on the server serially, in the
 |      order provided. If an error occurs all remaining operations
 |      are aborted.
 |      
 |      :Parameters:
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``.
 |      
 |      Returns a :class:`~pymongo.bulk.BulkOperationBuilder` instance.
 |      
 |      See :ref:`ordered_bulk` for examples.
 |      
 |      .. note:: `bypass_document_validation` requires server version
 |        **>= 3.2**
 |      
 |      .. versionchanged:: 3.5
 |         Deprecated. Use :meth:`~pymongo.collection.Collection.bulk_write`
 |         instead.
 |      
 |      .. versionchanged:: 3.2
 |         Added bypass_document_validation support
 |      
 |      .. versionadded:: 2.7
 |  
 |  initialize_unordered_bulk_op(self, bypass_document_validation=False)
 |      **DEPRECATED** - Initialize an unordered batch of write operations.
 |      
 |      Operations will be performed on the server in arbitrary order,
 |      possibly in parallel. All operations will be attempted.
 |      
 |      :Parameters:
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``.
 |      
 |      Returns a :class:`~pymongo.bulk.BulkOperationBuilder` instance.
 |      
 |      See :ref:`unordered_bulk` for examples.
 |      
 |      .. note:: `bypass_document_validation` requires server version
 |        **>= 3.2**
 |      
 |      .. versionchanged:: 3.5
 |         Deprecated. Use :meth:`~pymongo.collection.Collection.bulk_write`
 |         instead.
 |      
 |      .. versionchanged:: 3.2
 |         Added bypass_document_validation support
 |      
 |      .. versionadded:: 2.7
 |  
 |  inline_map_reduce(self, map, reduce, full_response=False, session=None, **kwargs)
 |      Perform an inline map/reduce operation on this collection.
 |      
 |      Perform the map/reduce operation on the server in RAM. A result
 |      collection is not created. The result set is returned as a list
 |      of documents.
 |      
 |      If `full_response` is ``False`` (default) returns the
 |      result documents in a list. Otherwise, returns the full
 |      response from the server to the `map reduce command`_.
 |      
 |      The :meth:`inline_map_reduce` method obeys the :attr:`read_preference`
 |      of this :class:`Collection`.
 |      
 |      :Parameters:
 |        - `map`: map function (as a JavaScript string)
 |        - `reduce`: reduce function (as a JavaScript string)
 |        - `full_response` (optional): if ``True``, return full response to
 |          this command - otherwise just return the result collection
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional arguments to the
 |          `map reduce command`_ may be passed as keyword arguments to this
 |          helper method, e.g.::
 |      
 |          >>> db.test.inline_map_reduce(map, reduce, limit=2)
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.4
 |         Added the `collation` option.
 |  
 |  insert(self, doc_or_docs, manipulate=True, check_keys=True, continue_on_error=False, **kwargs)
 |      Insert a document(s) into this collection.
 |      
 |      **DEPRECATED** - Use :meth:`insert_one` or :meth:`insert_many` instead.
 |      
 |      .. versionchanged:: 3.0
 |         Removed the `safe` parameter. Pass ``w=0`` for unacknowledged write
 |         operations.
 |  
 |  insert_many(self, documents, ordered=True, bypass_document_validation=False, session=None)
 |      Insert an iterable of documents.
 |      
 |        >>> db.test.count_documents({})
 |        0
 |        >>> result = db.test.insert_many([{'x': i} for i in range(2)])
 |        >>> result.inserted_ids
 |        [ObjectId('54f113fffba522406c9cc20e'), ObjectId('54f113fffba522406c9cc20f')]
 |        >>> db.test.count_documents({})
 |        2
 |      
 |      :Parameters:
 |        - `documents`: A iterable of documents to insert.
 |        - `ordered` (optional): If ``True`` (the default) documents will be
 |          inserted on the server serially, in the order provided. If an error
 |          occurs all remaining inserts are aborted. If ``False``, documents
 |          will be inserted on the server in arbitrary order, possibly in
 |          parallel, and all document inserts will be attempted.
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        An instance of :class:`~pymongo.results.InsertManyResult`.
 |      
 |      .. seealso:: :ref:`writes-and-ids`
 |      
 |      .. note:: `bypass_document_validation` requires server version
 |        **>= 3.2**
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.2
 |        Added bypass_document_validation support
 |      
 |      .. versionadded:: 3.0
 |  
 |  insert_one(self, document, bypass_document_validation=False, session=None)
 |      Insert a single document.
 |      
 |        >>> db.test.count_documents({'x': 1})
 |        0
 |        >>> result = db.test.insert_one({'x': 1})
 |        >>> result.inserted_id
 |        ObjectId('54f112defba522406c9cc208')
 |        >>> db.test.find_one({'x': 1})
 |        {u'x': 1, u'_id': ObjectId('54f112defba522406c9cc208')}
 |      
 |      :Parameters:
 |        - `document`: The document to insert. Must be a mutable mapping
 |          type. If the document does not have an _id field one will be
 |          added automatically.
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.InsertOneResult`.
 |      
 |      .. seealso:: :ref:`writes-and-ids`
 |      
 |      .. note:: `bypass_document_validation` requires server version
 |        **>= 3.2**
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.2
 |        Added bypass_document_validation support
 |      
 |      .. versionadded:: 3.0
 |  
 |  list_indexes(self, session=None)
 |      Get a cursor over the index documents for this collection.
 |      
 |        >>> for index in db.test.list_indexes():
 |        ...     print(index)
 |        ...
 |        SON([('v', 2), ('key', SON([('_id', 1)])), ('name', '_id_')])
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        An instance of :class:`~pymongo.command_cursor.CommandCursor`.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionadded:: 3.0
 |  
 |  map_reduce(self, map, reduce, out, full_response=False, session=None, **kwargs)
 |      Perform a map/reduce operation on this collection.
 |      
 |      If `full_response` is ``False`` (default) returns a
 |      :class:`~pymongo.collection.Collection` instance containing
 |      the results of the operation. Otherwise, returns the full
 |      response from the server to the `map reduce command`_.
 |      
 |      :Parameters:
 |        - `map`: map function (as a JavaScript string)
 |        - `reduce`: reduce function (as a JavaScript string)
 |        - `out`: output collection name or `out object` (dict). See
 |          the `map reduce command`_ documentation for available options.
 |          Note: `out` options are order sensitive. :class:`~bson.son.SON`
 |          can be used to specify multiple options.
 |          e.g. SON([('replace', <collection name>), ('db', <database name>)])
 |        - `full_response` (optional): if ``True``, return full response to
 |          this command - otherwise just return the result collection
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional arguments to the
 |          `map reduce command`_ may be passed as keyword arguments to this
 |          helper method, e.g.::
 |      
 |          >>> db.test.map_reduce(map, reduce, "myresults", limit=2)
 |      
 |      .. note:: The :meth:`map_reduce` method does **not** obey the
 |         :attr:`read_preference` of this :class:`Collection`. To run
 |         mapReduce on a secondary use the :meth:`inline_map_reduce` method
 |         instead.
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation (if the
 |         output is not inline) when using MongoDB >= 3.4.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |      
 |      .. seealso:: :doc:`/examples/aggregation`
 |      
 |      .. versionchanged:: 3.4
 |         Added the `collation` option.
 |      .. versionchanged:: 2.2
 |         Removed deprecated arguments: merge_output and reduce_output
 |      
 |      .. _map reduce command: http://docs.mongodb.org/manual/reference/command/mapReduce/
 |      
 |      .. mongodoc:: mapreduce
 |  
 |  next = __next__(self)
 |  
 |  options(self, session=None)
 |      Get the options set on this collection.
 |      
 |      Returns a dictionary of options and their values - see
 |      :meth:`~pymongo.database.Database.create_collection` for more
 |      information on the possible options. Returns an empty
 |      dictionary if the collection has not been created yet.
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |  
 |  parallel_scan(self, num_cursors, session=None, **kwargs)
 |      **DEPRECATED**: Scan this entire collection in parallel.
 |      
 |      Returns a list of up to ``num_cursors`` cursors that can be iterated
 |      concurrently. As long as the collection is not modified during
 |      scanning, each document appears once in one of the cursors result
 |      sets.
 |      
 |      For example, to process each document in a collection using some
 |      thread-safe ``process_document()`` function:
 |      
 |        >>> def process_cursor(cursor):
 |        ...     for document in cursor:
 |        ...     # Some thread-safe processing function:
 |        ...     process_document(document)
 |        >>>
 |        >>> # Get up to 4 cursors.
 |        ...
 |        >>> cursors = collection.parallel_scan(4)
 |        >>> threads = [
 |        ...     threading.Thread(target=process_cursor, args=(cursor,))
 |        ...     for cursor in cursors]
 |        >>>
 |        >>> for thread in threads:
 |        ...     thread.start()
 |        >>>
 |        >>> for thread in threads:
 |        ...     thread.join()
 |        >>>
 |        >>> # All documents have now been processed.
 |      
 |      The :meth:`parallel_scan` method obeys the :attr:`read_preference` of
 |      this :class:`Collection`.
 |      
 |      :Parameters:
 |        - `num_cursors`: the number of cursors to return
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs`: additional options for the parallelCollectionScan
 |          command can be passed as keyword arguments.
 |      
 |      .. note:: Requires server version **>= 2.5.5**.
 |      
 |      .. versionchanged:: 3.7
 |         Deprecated.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Added back support for arbitrary keyword arguments. MongoDB 3.4
 |         adds support for maxTimeMS as an option to the
 |         parallelCollectionScan command.
 |      
 |      .. versionchanged:: 3.0
 |         Removed support for arbitrary keyword arguments, since
 |         the parallelCollectionScan command has no optional arguments.
 |  
 |  reindex(self, session=None, **kwargs)
 |      Rebuilds all indexes on this collection.
 |      
 |      **DEPRECATED** - The :meth:`~reindex` method is deprecated and will be
 |      removed in PyMongo 4.0. Use :meth:`~pymongo.database.Database.command`
 |      to run the ``reIndex`` command directly instead::
 |      
 |        db.command({"reIndex": "<collection_name>"})
 |      
 |      .. note:: Starting in MongoDB 4.6, the `reIndex` command can only be
 |        run when connected to a standalone mongod.
 |      
 |      :Parameters:
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): optional arguments to the reIndex
 |          command (like maxTimeMS) can be passed as keyword arguments.
 |      
 |      .. warning:: reindex blocks all other operations (indexes
 |         are built in the foreground) and will be slow for large
 |         collections.
 |      
 |      .. versionchanged:: 3.11
 |         Deprecated.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter. Added support for arbitrary keyword
 |         arguments.
 |      
 |      .. versionchanged:: 3.5
 |         We no longer apply this collection's write concern to this operation.
 |         MongoDB 3.4 silently ignored the write concern. MongoDB 3.6+ returns
 |         an error if we include the write concern.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |  
 |  remove(self, spec_or_id=None, multi=True, **kwargs)
 |      Remove a document(s) from this collection.
 |      
 |      **DEPRECATED** - Use :meth:`delete_one` or :meth:`delete_many` instead.
 |      
 |      .. versionchanged:: 3.0
 |         Removed the `safe` parameter. Pass ``w=0`` for unacknowledged write
 |         operations.
 |  
 |  rename(self, new_name, session=None, **kwargs)
 |      Rename this collection.
 |      
 |      If operating in auth mode, client must be authorized as an
 |      admin to perform this operation. Raises :class:`TypeError` if
 |      `new_name` is not an instance of :class:`basestring`
 |      (:class:`str` in python 3). Raises :class:`~pymongo.errors.InvalidName`
 |      if `new_name` is not a valid collection name.
 |      
 |      :Parameters:
 |        - `new_name`: new name for this collection
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `**kwargs` (optional): additional arguments to the rename command
 |          may be passed as keyword arguments to this helper method
 |          (i.e. ``dropTarget=True``)
 |      
 |      .. note:: The :attr:`~pymongo.collection.Collection.write_concern` of
 |         this collection is automatically applied to this operation when using
 |         MongoDB >= 3.4.
 |      
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      
 |      .. versionchanged:: 3.4
 |         Apply this collection's write concern automatically to this operation
 |         when connected to MongoDB >= 3.4.
 |  
 |  replace_one(self, filter, replacement, upsert=False, bypass_document_validation=False, collation=None, hint=None, session=None)
 |      Replace a single document matching the filter.
 |      
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}
 |        >>> result = db.test.replace_one({'x': 1}, {'y': 1})
 |        >>> result.matched_count
 |        1
 |        >>> result.modified_count
 |        1
 |        >>> for doc in db.test.find({}):
 |        ...     print(doc)
 |        ...
 |        {u'y': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}
 |      
 |      The *upsert* option can be used to insert a new document if a matching
 |      document does not exist.
 |      
 |        >>> result = db.test.replace_one({'x': 1}, {'x': 1}, True)
 |        >>> result.matched_count
 |        0
 |        >>> result.modified_count
 |        0
 |        >>> result.upserted_id
 |        ObjectId('54f11e5c8891e756a6e1abd4')
 |        >>> db.test.find_one({'x': 1})
 |        {u'x': 1, u'_id': ObjectId('54f11e5c8891e756a6e1abd4')}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to replace.
 |        - `replacement`: The new document.
 |        - `upsert` (optional): If ``True``, perform an insert if no documents
 |          match the filter.
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``. This option is only supported on MongoDB 3.2 and above.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.2 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.UpdateResult`.
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.6
 |         Added ``session`` parameter.
 |      .. versionchanged:: 3.4
 |        Added the `collation` option.
 |      .. versionchanged:: 3.2
 |        Added bypass_document_validation support.
 |      
 |      .. versionadded:: 3.0
 |  
 |  save(self, to_save, manipulate=True, check_keys=True, **kwargs)
 |      Save a document in this collection.
 |      
 |      **DEPRECATED** - Use :meth:`insert_one` or :meth:`replace_one` instead.
 |      
 |      .. versionchanged:: 3.0
 |         Removed the `safe` parameter. Pass ``w=0`` for unacknowledged write
 |         operations.
 |  
 |  update(self, spec, document, upsert=False, manipulate=False, multi=False, check_keys=True, **kwargs)
 |      Update a document(s) in this collection.
 |      
 |      **DEPRECATED** - Use :meth:`replace_one`, :meth:`update_one`, or
 |      :meth:`update_many` instead.
 |      
 |      .. versionchanged:: 3.0
 |         Removed the `safe` parameter. Pass ``w=0`` for unacknowledged write
 |         operations.
 |  
 |  update_many(self, filter, update, upsert=False, array_filters=None, bypass_document_validation=False, collation=None, hint=None, session=None)
 |      Update one or more documents that match the filter.
 |      
 |        >>> for doc in db.test.find():
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |        >>> result = db.test.update_many({'x': 1}, {'$inc': {'x': 3}})
 |        >>> result.matched_count
 |        3
 |        >>> result.modified_count
 |        3
 |        >>> for doc in db.test.find():
 |        ...     print(doc)
 |        ...
 |        {u'x': 4, u'_id': 0}
 |        {u'x': 4, u'_id': 1}
 |        {u'x': 4, u'_id': 2}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the documents to update.
 |        - `update`: The modifications to apply.
 |        - `upsert` (optional): If ``True``, perform an insert if no documents
 |          match the filter.
 |        - `bypass_document_validation` (optional): If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``. This option is only supported on MongoDB 3.2 and above.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `array_filters` (optional): A list of filters specifying which
 |          array elements an update should apply. This option is only
 |          supported on MongoDB 3.6 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.2 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.UpdateResult`.
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.9
 |         Added the ability to accept a pipeline as the `update`.
 |      .. versionchanged:: 3.6
 |         Added ``array_filters`` and ``session`` parameters.
 |      .. versionchanged:: 3.4
 |        Added the `collation` option.
 |      .. versionchanged:: 3.2
 |        Added bypass_document_validation support.
 |      
 |      .. versionadded:: 3.0
 |  
 |  update_one(self, filter, update, upsert=False, bypass_document_validation=False, collation=None, array_filters=None, hint=None, session=None)
 |      Update a single document matching the filter.
 |      
 |        >>> for doc in db.test.find():
 |        ...     print(doc)
 |        ...
 |        {u'x': 1, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |        >>> result = db.test.update_one({'x': 1}, {'$inc': {'x': 3}})
 |        >>> result.matched_count
 |        1
 |        >>> result.modified_count
 |        1
 |        >>> for doc in db.test.find():
 |        ...     print(doc)
 |        ...
 |        {u'x': 4, u'_id': 0}
 |        {u'x': 1, u'_id': 1}
 |        {u'x': 1, u'_id': 2}
 |      
 |      :Parameters:
 |        - `filter`: A query that matches the document to update.
 |        - `update`: The modifications to apply.
 |        - `upsert` (optional): If ``True``, perform an insert if no documents
 |          match the filter.
 |        - `bypass_document_validation`: (optional) If ``True``, allows the
 |          write to opt-out of document level validation. Default is
 |          ``False``. This option is only supported on MongoDB 3.2 and above.
 |        - `collation` (optional): An instance of
 |          :class:`~pymongo.collation.Collation`. This option is only supported
 |          on MongoDB 3.4 and above.
 |        - `array_filters` (optional): A list of filters specifying which
 |          array elements an update should apply. This option is only
 |          supported on MongoDB 3.6 and above.
 |        - `hint` (optional): An index to use to support the query
 |          predicate specified either by its string name, or in the same
 |          format as passed to
 |          :meth:`~pymongo.collection.Collection.create_index` (e.g.
 |          ``[('field', ASCENDING)]``). This option is only supported on
 |          MongoDB 4.2 and above.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |      
 |      :Returns:
 |        - An instance of :class:`~pymongo.results.UpdateResult`.
 |      
 |      .. versionchanged:: 3.11
 |         Added ``hint`` parameter.
 |      .. versionchanged:: 3.9
 |         Added the ability to accept a pipeline as the ``update``.
 |      .. versionchanged:: 3.6
 |         Added the ``array_filters`` and ``session`` parameters.
 |      .. versionchanged:: 3.4
 |        Added the ``collation`` option.
 |      .. versionchanged:: 3.2
 |        Added ``bypass_document_validation`` support.
 |      
 |      .. versionadded:: 3.0
 |  
 |  watch(self, pipeline=None, full_document=None, resume_after=None, max_await_time_ms=None, batch_size=None, collation=None, start_at_operation_time=None, session=None, start_after=None)
 |      Watch changes on this collection.
 |      
 |      Performs an aggregation with an implicit initial ``$changeStream``
 |      stage and returns a
 |      :class:`~pymongo.change_stream.CollectionChangeStream` cursor which
 |      iterates over changes on this collection.
 |      
 |      Introduced in MongoDB 3.6.
 |      
 |      .. code-block:: python
 |      
 |         with db.collection.watch() as stream:
 |             for change in stream:
 |                 print(change)
 |      
 |      The :class:`~pymongo.change_stream.CollectionChangeStream` iterable
 |      blocks until the next change document is returned or an error is
 |      raised. If the
 |      :meth:`~pymongo.change_stream.CollectionChangeStream.next` method
 |      encounters a network error when retrieving a batch from the server,
 |      it will automatically attempt to recreate the cursor such that no
 |      change events are missed. Any error encountered during the resume
 |      attempt indicates there may be an outage and will be raised.
 |      
 |      .. code-block:: python
 |      
 |          try:
 |              with db.collection.watch(
 |                      [{'$match': {'operationType': 'insert'}}]) as stream:
 |                  for insert_change in stream:
 |                      print(insert_change)
 |          except pymongo.errors.PyMongoError:
 |              # The ChangeStream encountered an unrecoverable error or the
 |              # resume attempt failed to recreate the cursor.
 |              logging.error('...')
 |      
 |      For a precise description of the resume process see the
 |      `change streams specification`_.
 |      
 |      .. note:: Using this helper method is preferred to directly calling
 |          :meth:`~pymongo.collection.Collection.aggregate` with a
 |          ``$changeStream`` stage, for the purpose of supporting
 |          resumability.
 |      
 |      .. warning:: This Collection's :attr:`read_concern` must be
 |          ``ReadConcern("majority")`` in order to use the ``$changeStream``
 |          stage.
 |      
 |      :Parameters:
 |        - `pipeline` (optional): A list of aggregation pipeline stages to
 |          append to an initial ``$changeStream`` stage. Not all
 |          pipeline stages are valid after a ``$changeStream`` stage, see the
 |          MongoDB documentation on change streams for the supported stages.
 |        - `full_document` (optional): The fullDocument to pass as an option
 |          to the ``$changeStream`` stage. Allowed values: 'updateLookup'.
 |          When set to 'updateLookup', the change notification for partial
 |          updates will include both a delta describing the changes to the
 |          document, as well as a copy of the entire document that was
 |          changed from some time after the change occurred.
 |        - `resume_after` (optional): A resume token. If provided, the
 |          change stream will start returning changes that occur directly
 |          after the operation specified in the resume token. A resume token
 |          is the _id value of a change document.
 |        - `max_await_time_ms` (optional): The maximum time in milliseconds
 |          for the server to wait for changes before responding to a getMore
 |          operation.
 |        - `batch_size` (optional): The maximum number of documents to return
 |          per batch.
 |        - `collation` (optional): The :class:`~pymongo.collation.Collation`
 |          to use for the aggregation.
 |        - `start_at_operation_time` (optional): If provided, the resulting
 |          change stream will only return changes that occurred at or after
 |          the specified :class:`~bson.timestamp.Timestamp`. Requires
 |          MongoDB >= 4.0.
 |        - `session` (optional): a
 |          :class:`~pymongo.client_session.ClientSession`.
 |        - `start_after` (optional): The same as `resume_after` except that
 |          `start_after` can resume notifications after an invalidate event.
 |          This option and `resume_after` are mutually exclusive.
 |      
 |      :Returns:
 |        A :class:`~pymongo.change_stream.CollectionChangeStream` cursor.
 |      
 |      .. versionchanged:: 3.9
 |         Added the ``start_after`` parameter.
 |      
 |      .. versionchanged:: 3.7
 |         Added the ``start_at_operation_time`` parameter.
 |      
 |      .. versionadded:: 3.6
 |      
 |      .. mongodoc:: changeStreams
 |      
 |      .. _change streams specification:
 |          https://github.com/mongodb/specifications/blob/master/source/change-streams/change-streams.rst
 |  
 |  with_options(self, codec_options=None, read_preference=None, write_concern=None, read_concern=None)
 |      Get a clone of this collection changing the specified settings.
 |      
 |        >>> coll1.read_preference
 |        Primary()
 |        >>> from pymongo import ReadPreference
 |        >>> coll2 = coll1.with_options(read_preference=ReadPreference.SECONDARY)
 |        >>> coll1.read_preference
 |        Primary()
 |        >>> coll2.read_preference
 |        Secondary(tag_sets=None)
 |      
 |      :Parameters:
 |        - `codec_options` (optional): An instance of
 |          :class:`~bson.codec_options.CodecOptions`. If ``None`` (the
 |          default) the :attr:`codec_options` of this :class:`Collection`
 |          is used.
 |        - `read_preference` (optional): The read preference to use. If
 |          ``None`` (the default) the :attr:`read_preference` of this
 |          :class:`Collection` is used. See :mod:`~pymongo.read_preferences`
 |          for options.
 |        - `write_concern` (optional): An instance of
 |          :class:`~pymongo.write_concern.WriteConcern`. If ``None`` (the
 |          default) the :attr:`write_concern` of this :class:`Collection`
 |          is used.
 |        - `read_concern` (optional): An instance of
 |          :class:`~pymongo.read_concern.ReadConcern`. If ``None`` (the
 |          default) the :attr:`read_concern` of this :class:`Collection`
 |          is used.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  database
 |      The :class:`~pymongo.database.Database` that this
 |      :class:`Collection` is a part of.
 |  
 |  full_name
 |      The full name of this :class:`Collection`.
 |      
 |      The full name is of the form `database_name.collection_name`.
 |  
 |  name
 |      The name of this :class:`Collection`.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pymongo.common.BaseObject:
 |  
 |  codec_options
 |      Read only access to the :class:`~bson.codec_options.CodecOptions`
 |      of this instance.
 |  
 |  read_concern
 |      Read only access to the :class:`~pymongo.read_concern.ReadConcern`
 |      of this instance.
 |      
 |      .. versionadded:: 3.2
 |  
 |  read_preference
 |      Read only access to the read preference of this instance.
 |      
 |      .. versionchanged:: 3.0
 |        The :attr:`read_preference` attribute is now read only.
 |  
 |  write_concern
 |      Read only access to the :class:`~pymongo.write_concern.WriteConcern`
 |      of this instance.
 |      
 |      .. versionchanged:: 3.0
 |        The :attr:`write_concern` attribute is now read only.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pymongo.common.BaseObject:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

